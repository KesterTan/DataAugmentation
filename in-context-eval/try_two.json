[
    {
        "question_id": 1501,
        "text": "The number of timeshare condos available at Sunset Beach is 2/5 the number of timeshare condos available at Playa del Mar. If the total number of timeshare condos available at the two beaches combined is 350, what is the difference between the number of condos available at Sunset Beach and the number of condos available at Playa del Mar?\\\n \nUse this API documentation for reference: [{\"name\": \"multiply\", \"description\": \"Multiplies two numbers\", \"parameters\": {\"arg_0\": {\"description\": \"The first number\", \"type\": \"int or float\"}, \"arg_1\": {\"description\": \"The second number\", \"type\": \"int or float\"}}, \"output_parameter\": {\"result\": {\"description\": \"The multiplication result\", \"type\": \"int or float\"}}}, {\"name\": \"subtract\", \"description\": \"subtract two numbers\", \"parameters\": {\"arg_0\": {\"description\": \"The first number\", \"type\": \"int or float\"}, \"arg_1\": {\"description\": \"The second number\", \"type\": \"int or float\"}}, \"output_parameter\": {\"result\": {\"description\": \"The subtraction result\", \"type\": \"int or float\"}}}, {\"name\": \"divide\", \"description\": \"divides two numbers\", \"parameters\": {\"arg_0\": {\"description\": \"The first number\", \"type\": \"int or float\"}, \"arg_1\": {\"description\": \"The second number\", \"type\": \"int or float\"}}, \"output_parameter\": {\"result\": {\"description\": \"The division result\", \"type\": \"int or float\"}}}, {\"name\": \"floor\", \"description\": \"Return the largest integer less than or equal to x.\", \"parameters\": {\"arg_0\": {\"description\": \"The input number\", \"type\": \"int\"}}, \"output_parameter\": {\"result\": {\"description\": \"the flooring result\", \"type\": \"int\"}}}, {\"name\": \"permutation\", \"description\": \"Calculate the number of permutations of n items taken r at a time\", \"parameters\": {\"arg_0\": {\"description\": \"Total number of items\", \"type\": \"int\"}, \"arg_1\": {\"description\": \"Number of items being arranged\", \"type\": \"int\"}}, \"output_parameter\": {\"result\": {\"description\": \"Number of permutations\", \"type\": \"int\"}}}, {\"name\": \"negate\", \"description\": \"Return the negation of a number\", \"parameters\": {\"arg_0\": {\"description\": \"The number to inverse\", \"type\": \"int or float\"}}, \"output_parameter\": {\"result\": {\"description\": \"The inverse result\", \"type\": \"int or float\"}}}, {\"name\": \"volume_cone\", \"description\": \"Calculate the volume of a cone\", \"parameters\": {\"arg_0\": {\"description\": \"Radius of the base of the cone\", \"type\": \"float\"}, \"arg_1\": {\"description\": \"Height of the cone\", \"type\": \"float\"}}, \"output_parameter\": {\"result\": {\"description\": \"Volume of the cone\", \"type\": \"float\"}}}, {\"name\": \"add\", \"description\": \"adds two numbers\", \"parameters\": {\"arg_0\": {\"description\": \"The first number\", \"type\": \"int or float\"}, \"arg_1\": {\"description\": \"The second number\", \"type\": \"int or float\"}}, \"output_parameter\": {\"result\": {\"description\": \"The addition result\", \"type\": \"int or float\"}}}, {\"name\": \"inverse\", \"description\": \"Return the inverse (reciprocal) of a number\", \"parameters\": {\"arg_0\": {\"description\": \"The number to inverse\", \"type\": \"int or float\"}}, \"output_parameter\": {\"result\": {\"description\": \"The inverse result\", \"type\": \"int or float\"}}}, {\"name\": \"square_edge_by_perimeter\", \"description\": \"Calculate the edge length of a square given its perimeter\", \"parameters\": {\"arg_0\": {\"description\": \"Perimeter of the square\", \"type\": \"float\"}}, \"output_parameter\": {\"result\": {\"description\": \"Edge length of the square\", \"type\": \"float\"}}}]\\\n \n",
        "category": "generic"
    },
    {
        "question_id": 1502,
        "text": "Generate the first 5 terms of the \\\"power of two\\\" sequence. Then, calculate the product of all numbers in the sequence, excluding the number at each index.\\\n \nUse this API documentation for reference: [{\"description\": \"Computes the degree of a polynomial expressed as a list of coefficients in decreasing order of powers.\\nThe function handles a leading zero case where the degree of the polynomial is 0 (i.e., the list only contains a single zero).\", \"name\": \"compute_degree\", \"output_parameters\": {\"properties\": {\"output_0\": {\"description\": \"\", \"type\": \"integer\"}}}, \"parameters\": {\"properties\": {\"coefficients\": {\"description\": \"The coefficients of the polynomial in decreasing order of powers.\", \"items\": {\"type\": \"number\"}, \"type\": \"array\"}}, \"required\": [\"coefficients\"], \"type\": \"object\"}}, {\"description\": \"Generates the first `n` terms of the \\\"power of two\\\" sequence.\\n\\nThe sequence is defined as follows: the first term is 1, the second term is 2,\\nthe third term is 4, and so on.\", \"name\": \"generate_power_of_two_list\", \"output_parameters\": {\"properties\": {\"output_0\": {\"description\": \"A list of the first `n` terms of the \\\"power of two\\\" sequence.\", \"type\": \"array\"}}}, \"parameters\": {\"properties\": {\"n\": {\"description\": \"A non-negative integer.\", \"type\": \"integer\"}}, \"required\": [\"n\"], \"type\": \"object\"}}, {\"description\": \"Returns a list of non-empty substrings that do not contain any whitespace characters.\", \"name\": \"non_whitespace_substrings\", \"output_parameters\": {\"properties\": {\"output_0\": {\"description\": \"\", \"type\": \"array\"}}}, \"parameters\": {\"properties\": {\"input_str\": {\"description\": \"A string containing multiple words separated by whitespace characters.\", \"type\": \"string\"}}, \"required\": [\"input_str\"], \"type\": \"object\"}}, {\"description\": \"Calculates the saliency ratio for a given time series.\", \"name\": \"ratio_saliency\", \"output_parameters\": {\"properties\": {\"output_0\": {\"description\": \"A list of floats representing the saliency ratios.\", \"type\": \"array\"}}}, \"parameters\": {\"properties\": {\"time_series\": {\"description\": \"A list of integers representing the time series.\", \"items\": {\"type\": \"integer\"}, \"type\": \"array\"}}, \"required\": [\"time_series\"], \"type\": \"object\"}}, {\"description\": \"Inserts the content of a file into a SQLite database.\", \"name\": \"insert_file_into_database\", \"output_parameters\": {\"properties\": {\"output_0\": {\"description\": \"The number of rows inserted into the database.\", \"type\": \"integer\"}}}, \"parameters\": {\"properties\": {\"conn\": {\"description\": \"The SQLite database connection.\", \"type\": \"object\"}, \"file_path\": {\"description\": \"The path to the file to be inserted.\", \"type\": \"string\"}}, \"required\": [\"conn\", \"file_path\"], \"type\": \"object\"}}, {\"description\": \"Parses a string representing a list of numbers (separated by commas) into a list of floats.\", \"name\": \"parse_list_of_numbers\", \"output_parameters\": {\"properties\": {\"output_0\": {\"description\": \"A list of floats.\", \"type\": \"array\"}}}, \"parameters\": {\"properties\": {\"string\": {\"description\": \"The input string.\", \"type\": \"string\"}}, \"required\": [\"string\"], \"type\": \"object\"}}, {\"description\": \"Constructs a SQL query that does an `INSERT` into a table named `my_table` with the given records.\\nIf the column names are not provided explicitly, they should be derived from the first dictionary in the list.\", \"name\": \"generate_sql_insert_query\", \"output_parameters\": {\"properties\": {\"output_0\": {\"description\": \"\", \"type\": \"string\"}}}, \"parameters\": {\"properties\": {\"records\": {\"description\": \"A list of dictionaries representing database records.\", \"items\": {\"additionalProperties\": {\"type\": \"string\"}, \"type\": \"object\"}, \"type\": \"array\"}}, \"required\": [\"records\"], \"type\": \"object\"}}, {\"description\": \"Counts the number of non-zero integers in a list.\", \"name\": \"count_non_zeros\", \"output_parameters\": {\"properties\": {\"output_0\": {\"description\": \"The number of non-zero integers in the list.\", \"type\": \"integer\"}}}, \"parameters\": {\"properties\": {\"nums\": {\"description\": \"A list of integers.\", \"items\": {\"type\": \"integer\"}, \"type\": \"array\"}}, \"required\": [\"nums\"], \"type\": \"object\"}}, {\"description\": \"Calculates the product of all numbers in a list, excluding the number at each index.\", \"name\": \"exclude_product\", \"output_parameters\": {\"properties\": {\"output_0\": {\"description\": \"A new list where each element is the product of all numbers in the original list except the one at that index.\", \"type\": \"array\"}}}, \"parameters\": {\"properties\": {\"numbers\": {\"description\": \"A list of integers.\", \"items\": {\"type\": \"integer\"}, \"type\": \"array\"}}, \"required\": [\"numbers\"], \"type\": \"object\"}}, {\"description\": \"Sorts the keys of a dictionary and returns a string with the key-value pairs.\", \"name\": \"sort_and_print_dictionary\", \"output_parameters\": {\"properties\": {\"output_0\": {\"description\": \"A string with the key-value pairs in sorted order.\", \"type\": \"string\"}}}, \"parameters\": {\"properties\": {\"dictionary\": {\"additionalProperties\": {\"type\": \"integer\"}, \"description\": \"The dictionary to sort and print.\", \"type\": \"object\"}}, \"required\": [\"dictionary\"], \"type\": \"object\"}}, {\"description\": \"Filters the employees based on the given rules.\", \"name\": \"filter_employees\", \"output_parameters\": {\"properties\": {\"output_0\": {\"description\": \"a list of dictionaries containing only the filtered employees.\", \"type\": \"array\"}}}, \"parameters\": {\"properties\": {\"employees\": {\"description\": \"a list of dictionaries representing employees.\", \"items\": {\"type\": \"object\"}, \"type\": \"array\"}, \"gender\": {\"description\": \"a string representing the desired gender ('male' or 'female').\", \"type\": \"string\"}}, \"required\": [\"employees\", \"gender\"], \"type\": \"object\"}}, {\"description\": \"Calculates the average of a list of numbers.\", \"name\": \"list_average\", \"output_parameters\": {\"properties\": {\"output_0\": {\"description\": \"The average of the numbers.\", \"type\": \"number\"}}}, \"parameters\": {\"properties\": {\"numbers\": {\"description\": \"A list of numbers.\", \"items\": {\"type\": \"number\"}, \"type\": \"array\"}}, \"required\": [\"numbers\"], \"type\": \"object\"}}, {\"description\": \"Counts the words in a list of sentences.\", \"name\": \"count_words_from_sentences\", \"output_parameters\": {\"properties\": {\"output_0\": {\"description\": \"A dictionary of words and their corresponding counts.\", \"type\": \"object\"}}}, \"parameters\": {\"properties\": {\"sentences\": {\"description\": \"A list of sentences.\", \"items\": {\"type\": \"string\"}, \"type\": \"array\"}}, \"required\": [\"sentences\"], \"type\": \"object\"}}, {\"description\": \"Capitalizes the first letter of each word in a string.\", \"name\": \"capitalize_first_letter_of_each_word\", \"output_parameters\": {\"properties\": {\"output_0\": {\"description\": \"\", \"type\": \"string\"}}}, \"parameters\": {\"properties\": {\"s\": {\"description\": \"The input string.\", \"type\": \"string\"}}, \"required\": [\"s\"], \"type\": \"object\"}}, {\"description\": \"Parses request headers to extract a specific cookie value by its name.\", \"name\": \"get_cookie_value\", \"output_parameters\": {\"properties\": {\"output_0\": {\"description\": \"The value of the cookie if found, otherwise `None`.\", \"type\": \"string\"}}}, \"parameters\": {\"properties\": {\"cookie_name\": {\"description\": \"The name of the cookie to extract the value for.\", \"type\": \"string\"}, \"headers\": {\"additionalProperties\": {\"type\": \"string\"}, \"description\": \"A dictionary with keys representing header names and values representing their corresponding values.\", \"type\": \"object\"}}, \"required\": [\"headers\", \"cookie_name\"], \"type\": \"object\"}}, {\"description\": \"Traverses a square matrix and returns the diagonal elements, ordered from the top-left to the bottom-right.\", \"name\": \"traverse_diagonal\", \"output_parameters\": {\"properties\": {\"output_0\": {\"description\": \"A list of the diagonal elements.\", \"type\": \"array\"}}}, \"parameters\": {\"properties\": {\"matrix\": {\"description\": \"A square matrix represented as a list of lists.\", \"items\": {\"items\": {\"type\": \"integer\"}, \"type\": \"array\"}, \"type\": \"array\"}}, \"required\": [\"matrix\"], \"type\": \"object\"}}, {\"description\": \"Returns a new list with only the strings that contain a specific character.\", \"name\": \"get_strings_containing_char\", \"output_parameters\": {\"properties\": {\"output_0\": {\"description\": \"\", \"type\": \"array\"}}}, \"parameters\": {\"properties\": {\"my_char\": {\"description\": \"The character to search for.\", \"type\": \"string\"}, \"my_strings\": {\"description\": \"A list of strings.\", \"items\": {\"type\": \"string\"}, \"type\": \"array\"}}, \"required\": [\"my_strings\", \"my_char\"], \"type\": \"object\"}}]\\\n \n",
        "category": "generic"
    }
]